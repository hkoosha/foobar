openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:4043
  description: Generated server url
paths:
  /foobar/seller/v1/sellers:
    get:
      tags:
      - seller
      operationId: getSellers
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Seller'
    post:
      tags:
      - seller
      operationId: postSeller
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SellerCreateRequest'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Seller'
  /foobar/seller/v1/sellers/{sellerId}:
    get:
      tags:
      - seller
      operationId: getSeller
      parameters:
      - name: sellerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Seller'
    delete:
      tags:
      - seller
      operationId: deleteSeller
      parameters:
      - name: sellerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "204":
          description: No Content
    patch:
      tags:
      - seller
      operationId: patchSeller
      parameters:
      - name: sellerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SellerUpdateRequest'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Seller'
components:
  schemas:
    EntityInfo:
      required:
      - entityType
      type: object
      properties:
        entityType:
          type: string
        entityId:
          type: object
    EntityNotFoundApiError:
      required:
      - context
      - error
      - message
      type: object
      properties:
        message:
          type: string
        context:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EntityInfo'
        error:
          type: string
    EntityBadValueApiError:
      required:
      - context
      - error
      - message
      type: object
      properties:
        message:
          type: string
        context:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        error:
          type: string
    EntityIllegalStateApiError:
      required:
      - context
      - error
      - message
      type: object
      properties:
        message:
          type: string
        context:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EntityInfo'
        error:
          type: string
    SellerCreateRequest:
      required:
      - address
      - name
      type: object
      properties:
        name:
          maxLength: 127
          minLength: 1
          type: string
        address:
          $ref: '#/components/schemas/SellerCreateRequestAddress'
    SellerCreateRequestAddress:
      required:
      - addressLine1
      - city
      - country
      - zipcode
      type: object
      properties:
        zipcode:
          maxLength: 10
          minLength: 1
          type: string
        addressLine1:
          maxLength: 127
          minLength: 1
          type: string
        country:
          maxLength: 127
          minLength: 1
          type: string
        city:
          maxLength: 127
          minLength: 1
          type: string
    Address:
      required:
      - addressLine1
      - city
      - country
      - zipcode
      type: object
      properties:
        zipcode:
          type: string
        addressLine1:
          type: string
        country:
          type: string
        city:
          type: string
    Seller:
      required:
      - address
      - isActive
      - name
      - sellerId
      type: object
      properties:
        sellerId:
          type: string
          format: uuid
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        isActive:
          type: boolean
    SellerUpdateRequest:
      type: object
      properties:
        name:
          maxLength: 127
          minLength: 1
          type: string
        address:
          $ref: '#/components/schemas/SellerUpdateRequestAddress'
    SellerUpdateRequestAddress:
      type: object
      properties:
        zipcode:
          maxLength: 10
          minLength: 1
          type: string
        addressLine1:
          maxLength: 127
          minLength: 1
          type: string
        country:
          maxLength: 127
          minLength: 1
          type: string
        city:
          maxLength: 127
          minLength: 1
          type: string
