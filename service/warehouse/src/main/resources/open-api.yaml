openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:4046
  description: Generated server url
paths:
  /foobar/warehouse/v1/products:
    get:
      tags:
      - product
      operationId: getProducts
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
      - product
      operationId: postProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
  /foobar/warehouse/v1/products/{productId}/availabilities:
    get:
      tags:
      - availability
      operationId: getAvailabilities
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Availability'
    post:
      tags:
      - availability
      operationId: postAvailability
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailabilityCreateRequest'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Availability'
  /foobar/warehouse/v1/products/{productId}:
    get:
      tags:
      - product
      operationId: getProduct
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags:
      - product
      operationId: deleteProduct
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "204":
          description: No Content
    patch:
      tags:
      - product
      operationId: patchProduct
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
  /foobar/warehouse/v1/products/{productId}/availabilities/{sellerId}:
    get:
      tags:
      - availability
      operationId: getAvailability
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: sellerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Availability'
    delete:
      tags:
      - availability
      operationId: deleteAvailability
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: sellerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "204":
          description: No Content
    patch:
      tags:
      - availability
      operationId: patchAvailability
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: sellerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailabilityUpdateRequest'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityNotFoundApiError'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityBadValueApiError'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityIllegalStateApiError'
        "503":
          description: Service Unavailable
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Availability'
components:
  schemas:
    EntityInfo:
      required:
      - entityType
      type: object
      properties:
        entityType:
          type: string
        entityId:
          type: object
    EntityNotFoundApiError:
      required:
      - context
      - error
      - message
      type: object
      properties:
        message:
          type: string
        context:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EntityInfo'
        error:
          type: string
    EntityBadValueApiError:
      required:
      - context
      - error
      - message
      type: object
      properties:
        message:
          type: string
        context:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        error:
          type: string
    EntityIllegalStateApiError:
      required:
      - context
      - error
      - message
      type: object
      properties:
        message:
          type: string
        context:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EntityInfo'
        error:
          type: string
    ProductCreateRequest:
      required:
      - active
      - name
      - unitMultiple
      - unitSingle
      type: object
      properties:
        active:
          type: boolean
        name:
          maxLength: 127
          minLength: 1
          type: string
        unitSingle:
          maxLength: 10
          minLength: 1
          type: string
        unitMultiple:
          maxLength: 10
          minLength: 1
          type: string
    Product:
      required:
      - active
      - name
      - productId
      - unitMultiple
      - unitSingle
      type: object
      properties:
        productId:
          type: string
          format: uuid
        active:
          type: boolean
        name:
          type: string
        unitMultiple:
          type: string
        unitSingle:
          type: string
    AvailabilityCreateRequest:
      required:
      - pricePerUnit
      - sellerId
      - unitsAvailable
      type: object
      properties:
        sellerId:
          type: string
          format: uuid
        unitsAvailable:
          minimum: 0
          type: integer
          format: int64
        pricePerUnit:
          minimum: 0
          type: integer
          format: int64
    Availability:
      required:
      - frozenUnits
      - pricePerUnit
      - sellerId
      - unitsAvailable
      type: object
      properties:
        sellerId:
          type: string
          format: uuid
        unitsAvailable:
          type: integer
          format: int64
        frozenUnits:
          type: integer
          format: int64
        pricePerUnit:
          type: integer
          format: int64
    ProductUpdateRequest:
      type: object
      properties:
        active:
          type: boolean
        name:
          maxLength: 127
          minLength: 1
          type: string
        unitSingle:
          maxLength: 10
          minLength: 1
          type: string
        unitMultiple:
          maxLength: 10
          minLength: 1
          type: string
    AvailabilityUpdateRequest:
      type: object
      properties:
        unitsAvailable:
          minimum: 0
          type: integer
          format: int64
        unitsToFreeze:
          minimum: 0
          type: integer
          format: int64
        pricePerUnit:
          minimum: 0
          type: integer
          format: int64
